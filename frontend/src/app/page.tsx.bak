'use client'

import { useState, useEffect } from 'react'
import { DateRange } from '@/types'
import { DateRangePicker } from '@/components/DateRangePicker'
import { Dashboard } from '@/components/Dashboard'
import { CallsTable } from '@/components/CallsTable'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { CalendarDays, BarChart3, Table, Download, Loader2, AlertCircle, Clock, Phone, TrendingUp, FileText } from 'lucide-react'

type StatCardProps = {
  title: string
  value: string | number
  icon: React.ReactNode
  trend?: string
  trendType?: 'positive' | 'negative' | 'neutral'
}

const StatCard = ({ title, value, icon, trend, trendType = 'neutral' }: StatCardProps) => (
  <Card className="flex-1 min-w-[200px] bg-gradient-to-br from-gray-50 to-white border border-gray-100 rounded-xl shadow-sm hover:shadow-md transition-all duration-200 overflow-hidden">
    <CardContent className="p-5">
      <div className="flex items-start justify-between">
        <div>
          <p className="text-sm font-medium text-gray-500 mb-1">{title}</p>
          <p className="text-2xl font-bold text-gray-800">{value}</p>
          {trend && (
            <div className={`mt-2 inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
              trendType === 'positive' ? 'bg-green-50 text-green-700' : 
              trendType === 'negative' ? 'bg-red-50 text-red-700' : 'bg-gray-50 text-gray-600'
            }`}>
              {trendType === 'positive' ? '↑' : trendType === 'negative' ? '↓' : '→'}
              <span className="ml-1">{trend}</span>
            </div>
          )}
        </div>
        <div className="p-2.5 rounded-lg bg-indigo-50 text-indigo-500">
          {icon}
        </div>
      </div>
    </CardContent>
  </Card>
)

export default function HomePage() {
  const [dateRange, setDateRange] = useState<DateRange>({
    from: new Date(new Date().setDate(new Date().getDate() - 7)),
    to: new Date()
  })
  const [activeTab, setActiveTab] = useState('dashboard')
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [stats, setStats] = useState({
    totalCalls: 0,
    avgDuration: '0:00',
    sentiment: 'Neutral',
    lastUpdated: new Date()
  })

  useEffect(() => {
    const fetchStats = async () => {
      setIsLoading(true)
      setError(null)
      try {
        // Replace with actual API call
        await new Promise(resolve => setTimeout(resolve, 1000))
        setStats({
          totalCalls: 124,
          avgDuration: '4:32',
          sentiment: 'Positive',
          lastUpdated: new Date()
        })
      } catch (err) {
        console.error('Error fetching stats:', err)
        setError('No se pudieron cargar las estadísticas. Por favor, intente de nuevo.')
      } finally {
        setIsLoading(false)
      }
    }

    fetchStats()
  }, [dateRange])

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-[60vh]">
        <Loader2 className="h-8 w-8 animate-spin text-indigo-600" />
        <span className="ml-2">Cargando datos...</span>
      </div>
    )
  }

  if (error) {
    return (
      <div className="rounded-md bg-red-50 p-4">
        <div className="flex">
          <div className="flex-shrink-0">
            <AlertCircle className="h-5 w-5 text-red-400" aria-hidden="true" />
          </div>
          <div className="ml-3">
            <h3 className="text-sm font-medium text-red-800">Error</h3>
            <div className="mt-2 text-sm text-red-700">
              <p>{error}</p>
            </div>
            <div className="mt-4">
              <Button
                variant="outline"
                onClick={() => window.location.reload()}
                className="text-sm font-medium text-red-700 hover:text-red-600"
              >
                Reintentar
              </Button>
            </div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50 p-4 sm:p-6">
      <div className="max-w-7xl mx-auto space-y-8">
        {/* Header */}
        <div className="flex flex-col space-y-4 md:space-y-0 md:flex-row md:items-center md:justify-between bg-white p-6 rounded-2xl shadow-sm">
          <div>
            <div className="flex items-center space-x-3">
              <div className="bg-indigo-100 p-2 rounded-lg">
                <Phone className="h-6 w-6 text-indigo-600" />
              </div>
              <h1 className="text-2xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">
                Eve
              </h1>
            </div>
            <p className="mt-2 text-sm text-gray-500">
              Análisis de llamadas en tiempo real
            </p>
          </div>
          <div className="flex items-center space-x-3">
            <DateRangePicker
              dateRange={dateRange}
              onDateRangeChange={setDateRange}
            />
            <Button className="bg-indigo-600 hover:bg-indigo-700 text-white">
              <Download className="h-4 w-4 mr-2" />
              Exportar
            </Button>
          </div>
        </div>

        {/* Stats Grid */}
        <div className="grid gap-5 sm:grid-cols-2 lg:grid-cols-4">
          <StatCard 
            title="Llamadas totales" 
            value={stats.totalCalls} 
            icon={<Phone className="h-5 w-5" />}
            trend="+12% desde la semana pasada"
            trendType="positive"
          />
          <StatCard 
            title="Duración promedio" 
            value={stats.avgDuration} 
            icon={<Clock className="h-5 w-5" />}
            trend="+0:30 desde la semana pasada"
            trendType="positive"
          />
          <StatCard 
            title="Sentimiento" 
            value={stats.sentiment} 
            icon={<TrendingUp className="h-5 w-5" />}
            trend="+5% desde la semana pasada"
            trendType="positive"
          />
          <StatCard 
            title="Última actualización" 
            value={stats.lastUpdated.toLocaleTimeString()} 
            icon={<CalendarDays className="h-5 w-5" />}
          />
        </div>

        {/* Main Content */}
        <div className="bg-white rounded-2xl shadow-sm overflow-hidden">
          <Tabs defaultValue="dashboard" className="w-full">
            <div className="border-b border-gray-200">
              <TabsList className="w-full justify-start px-6 pt-2 bg-transparent">
                <TabsTrigger 
                  value="dashboard" 
                  className="py-4 px-4 text-sm font-medium text-gray-500 hover:text-gray-700 border-b-2 border-transparent hover:border-gray-300 data-[state=active]:text-indigo-600 data-[state=active]:border-indigo-600"
                >
                  <BarChart3 className="h-4 w-4 mr-2" />
                  <span>Dashboard</span>
                </TabsTrigger>
                <TabsTrigger 
                  value="calls" 
                  className="py-4 px-4 text-sm font-medium text-gray-500 hover:text-gray-700 border-b-2 border-transparent hover:border-gray-300 data-[state=active]:text-indigo-600 data-[state=active]:border-indigo-600"
                >
                  <Table className="h-4 w-4 mr-2" />
                  <span>Llamadas</span>
                </TabsTrigger>
                <TabsTrigger 
                  value="export" 
                  className="py-4 px-4 text-sm font-medium text-gray-500 hover:text-gray-700 border-b-2 border-transparent hover:border-gray-300 data-[state=active]:text-indigo-600 data-[state=active]:border-indigo-600"
                >
                  <Download className="h-4 w-4 mr-2" />
                  <span>Exportar</span>
                </TabsTrigger>
              </TabsList>
            </div>

            <TabsContent value="dashboard" className="space-y-4">
              <Dashboard dateRange={dateRange} />
            </TabsContent>
            
            <TabsContent value="calls">
              <CallsTable dateRange={dateRange} />
            </TabsContent>
            
            <TabsContent value="export" className="p-6">
              <div className="max-w-2xl mx-auto">
                <div className="text-center mb-8">
                  <h3 className="text-xl font-semibold text-gray-900">Exportar datos</h3>
                  <p className="mt-2 text-sm text-gray-500">
                    Selecciona el formato y el rango de fechas para exportar los datos de las llamadas.
                  </p>
                </div>
                
                <div className="bg-gray-50 p-6 rounded-xl border border-gray-200">
                  <div className="grid gap-4 sm:grid-cols-2">
                    <Button 
                      variant="outline" 
                      className="h-24 flex flex-col items-center justify-center space-y-2 border-2 border-dashed border-gray-300 hover:border-indigo-300 hover:bg-indigo-50 transition-colors"
                    >
                      <FileText className="h-6 w-6 text-gray-400" />
                      <span className="text-sm font-medium">Exportar a Excel</span>
                      <span className="text-xs text-gray-400">.xlsx</span>
                    </Button>
                    
                    <Button 
                      variant="outline" 
                      className="h-24 flex flex-col items-center justify-center space-y-2 border-2 border-dashed border-gray-300 hover:border-indigo-300 hover:bg-indigo-50 transition-colors"
                    >
                      <FileText className="h-6 w-6 text-gray-400" />
                      <span className="text-sm font-medium">Exportar a CSV</span>
                      <span className="text-xs text-gray-400">.csv</span>
                    </Button>
                  </div>
                  
                  <div className="mt-6 pt-6 border-t border-gray-200">
                    <p className="text-sm text-gray-500 mb-3">Rango de fechas seleccionado:</p>
                    <div className="flex items-center justify-between bg-white p-3 rounded-lg border border-gray-200">
                      <span className="text-sm font-medium">
                        {dateRange.from?.toLocaleDateString()} - {dateRange.to?.toLocaleDateString()}
                      </span>
                      <Button variant="ghost" size="sm" className="text-indigo-600 hover:bg-indigo-50">
                        Cambiar
                      </Button>
                    </div>
                  </div>
                </div>
              </div>
            </TabsContent>
          </Tabs>
        </div>
      </div>
    </div>
  )